input {
    mongodb {
        uri => "mongodb+srv://admin:admin@walmart.ov3ju.mongodb.net/CCMS?retryWrites=true&w=majority&appName=walmart:27017"
        placeholder_db_dir => "/Users/k0p06fd/Downloads/logstash-8.17.1/logstash-mongodb"
        placeholder_db_name => "logstash_sqlite_new.db"
        collection => "Transactions"
        batch_size => 500
    }
}

filter {
  # Unwind the `creditcards` array
  if [creditcards] {
    split {
      field => "creditcards"
    }
  }

  # Unwind the `transactions` array inside `creditcards`
  if [creditcards][transactions] {
    split {
      field => "[creditcards][transactions]"
    }
  }

  # Flatten and rename fields
  mutate {
    add_field => {
      "username" => "%{username}"
      "creditCardId" => "%{[creditcards][creditCardId]}"
      "transactionDate" => "%{[creditcards][transactions][transactionDate]}"
      "transactionTime" => "%{[creditcards][transactions][transactionTime]}"
      "transactionAmount" => "%{[creditcards][transactions][transactionAmount]}"
      "transactionDesc" => "%{[creditcards][transactions][transactionDesc]}"
    }
    remove_field => ["creditcards", "[creditcards][transactions]"]
  }

  # Convert transactionAmount to a numeric value
  mutate {
    convert => { "transactionAmount" => "float" }
  }

  # Combine transactionDate and transactionTime into transactionDateTime
  if [transactionDate] and [transactionTime] {
    mutate {
      add_field => { "transactionDateTime" => "%{transactionDate} %{transactionTime}" }
    }
    date {
      match => ["transactionDateTime", "MM/dd/yyyy hh:mm a"]
      target => "@timestamp"
      remove_field => ["transactionDateTime"]
    }
  }

  # Rename `_id` to `mongo_id` to avoid conflicts
  mutate {
    rename => { "_id" => "mongo_id" }
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "ccms-transactions-index"
  }
  stdout {
    codec => json
  }
}

